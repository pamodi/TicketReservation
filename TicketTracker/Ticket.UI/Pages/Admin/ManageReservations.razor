@page "/admin/reservations"

@inject IConfiguration Configuration
@inject HttpClient Http
@using ClosedXML.Excel
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<PageTitle>Manage Reservations</PageTitle>

@if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="text-center">
            <div class="spinner-border text-warning" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="loading-text">🎟️ Loading...</p>
        </div>
    </div>
}
else
{
    <div class="container-fluid p-0 d-flex flex-column align-items-center justify-content-center mt-1 pt-0">
        <nav class="app-bar d-flex justify-content-between align-items-center">
            <h3 class="logo">📝 Manage Reservations</h3>
            <div class="d-flex align-items-center">
                <span class="text-light me-3">Welcome Admin!</span>
                <button class="btn btn-gold logout-btn" @onclick="Logout">
                    🔒 Logout
                </button>
            </div>
        </nav>

        <div class="card shadow-lg animate__animated animate__fadeIn form-card">
            <div class="card-body">
                <div class="row d-flex justify-content-center justify-content-md-between align-items-center flex-wrap g-2">
                    <div class="col-6 col-md-auto">
                        <input type="text" @bind="searchQuery" @oninput="OnSearch" class="form-control search-box w-100 w-md-auto" placeholder="🔍 Search..." />
                    </div>
                    <div class="col-6 col-md-auto text-center text-md-start">
                        <button class="btn btn-secondary add-btn w-100 w-md-auto" title="Add New Reservation" @onclick="OnAddClick">
                            <i class="bi bi-plus-circle"></i> 📋 Add Reservation
                        </button>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table custom-table table-hover">
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Phone</th>
                                <th>Tickets</th>
                                <th>Student</th>
                                <th>Contacted By</th>
                                <th width="50px">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (!PaginatedReservations.Any())
                            {
                                <tr>
                                    <td colspan="7" class="text-center text-warning">No reservations found</td>
                                </tr>
                            }
                            else
                            {
                                @foreach (var res in PaginatedReservations)
                                {
                                    <tr>
                                        <td>@res.Name</td>
                                        <td>@res.Email</td>
                                        <td>@res.PhoneNumber</td>
                                        <td>@res.Tickets</td>
                                        <td>
                                            <div class="form-check form-switch">
                                                <input type="checkbox" role="switch" checked="@res.IsStudent" disabled class="form-check-input" />
                                            </div>
                                        </td>
                                        <td>@res.ContactedBy</td>
                                        <td>
                                            <div class="d-flex justify-content-center">
                                                <button class="btn btn-sm" title="View More" @onclick="() => NavigateToDetails(res.Id, false)">
                                                    📂
                                                </button>
                                                <button class="btn btn-sm" title="Update" @onclick="() => NavigateToDetails(res.Id, true)">
                                                    ✏️
                                                </button>
                                                <button class="btn btn-sm" title="Delete" @onclick="() => ConfirmDelete(res.Id)">
                                                    🗑️
                                                </button>
                                            </div>
                                        </td>

                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination with Buttons -->
                <div class="row d-flex justify-content-between align-items-center" style="margin-top: -8px;">
                    <div class="col-auto">
                        <button class="btn btn-secondary" @onclick="ExportToExcel">📥 Export</button>
                    </div>
                    <div class="col-auto">
                        <span class="total-records page-text">📊 Total Records: @totalRecords</span>
                    </div>
                    <div class="col-auto d-flex align-items-center">
                        <span class="me-2 page-text">📄 Page @currentPage of @totalPages</span>
                        <button class="btn btn-secondary mx-2" @onclick="PrevPage" disabled="@(currentPage == 1)">⬅ Previous</button>
                        <button class="btn btn-secondary mx-2" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next ➡</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <AlertDialog Title="Confirm Delete"
    BodyText="Are you sure you want to delete this?"
    IsDelete="true"
    CloseBtnClick="CancelDelete"
    DeleteBtnClick="DeleteAsync" />
}

<!-- CSS Styles -->
<style>
    /* App Bar */
    .app-bar {
    width: 100%;
    background: rgba(187, 181, 181, 0);
    padding: 8px 10px;
    color: white;
    font-size: 18px;
    font-weight: bold;
    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.4);
    }

    .logo {
    margin: 0;
    font-weight: bold;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.4);
    }

    /* Form Card */
    .form-card {
    background: rgba(187, 181, 181, 0);
    border-radius: 12px;
    backdrop-filter: blur(15px);
    width: 100%;
    padding: 5px;
    box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.5);
    margin-top: 10px;
    }

    /* Search Box */
    .search-box {
    max-width: 300px;
    border-radius: 8px;
    border: none;
    }

    /* Custom Table */
    .custom-table {
    width: 100%;
    border-radius: 5px;
    overflow: hidden;

    }

    .custom-table th {
    background: rgba(187, 181, 181, 0);
    color: white
    }

    .custom-table td {
    background: rgba(0, 0, 0, 0.3);
    color: white;
    }

    /* Pagination */
    .page-text {
    font-size: 16px;
    color: white;
    }

    .btn-secondary {
        background: linear-gradient(135deg, #211616, #62605c);
    border: none;
    color: white;
    }

    .btn-secondary:hover {
            background: linear-gradient(135deg, #2b2929, #62605ce0);
    }

    /* Buttons */
    .add-btn {
    font-size: 16px;
    padding: 8px 15px;
    border-radius: 8px;
    }

    .btn-gold {
    background: linear-gradient(135deg, #d4af37, #b8860b);
    color: white;
    font-weight: bold;
    }

    .btn-gold:hover {
    background: linear-gradient(135deg, #b8860b, #8b6508);
    color: #fff;
    border-color: #ffffff8f;
    }

    .btn-sm {
    font-size: 14px;
    padding: 5px 10px;
    border-radius: 6px;
    }

    /* Responsive Design */
    .media (max-width: 768px) {
    .form-card

    {
    width: 95%;
    padding: 15px;
    }

    .app-bar {
    flex-direction: column;
    text-align: center;
    padding: 10px;
    }

    .logout-btn {
    margin-top: 8px;
    width: 100%;
    }

    .search-box {
    width: 100%;
    }

    .btn-secondary {
    font-size: 14px;
    padding: 5px 10px;
    }

    }
</style>

@code {
    private string searchQuery = "";
    private bool isAscending = true;
    private string sortedColumn = "Name";
    private List<ReservationsModel> reservations = new();
    private List<ReservationsModel> filteredReservations = new();
    private bool isLoading = true;
    private string WebApiAddress => Configuration["WebApiAddress"];
    private int reservationIdToDelete;
    private bool showDeleteModal = false;

    // Pagination variables
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages => Math.Max(1, (int)Math.Ceiling((double)filteredReservations.Count / pageSize));
    private int totalRecords;

    private IEnumerable<ReservationsModel> PaginatedReservations =>
        filteredReservations.Skip((currentPage - 1) * pageSize).Take(pageSize);

    protected override async Task OnInitializedAsync() => await LoadReservationsAsync();

    private async Task LoadReservationsAsync()
    {
        isLoading = true;
        var result = await Http.GetFromJsonAsync<List<ReservationsModel>>($"{WebApiAddress}/api/ticket/reservations");
        reservations = result ?? new List<ReservationsModel>();
        filteredReservations = reservations;
        totalRecords = filteredReservations.Count();
        currentPage = 1;
        isLoading = false;
    }

    private void OnSearch(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? "";
        filteredReservations = reservations
            .Where(item => item.Name.Contains(searchQuery)
            || (!string.IsNullOrEmpty(item.Email) && item.Email.Contains(searchQuery))
            || (!string.IsNullOrEmpty(item.PhoneNumber) && item.PhoneNumber.Contains(searchQuery))
            || (!string.IsNullOrEmpty(item.ContactedBy) && item.ContactedBy.Contains(searchQuery))
            || (!string.IsNullOrEmpty(item.Comments) && item.Comments.Contains(searchQuery))
            || (!string.IsNullOrEmpty(item.Tickets.ToString()) && item.Tickets.ToString().Contains(searchQuery)))
            .ToList();
        currentPage = 1; // Reset pagination on search
        totalRecords = filteredReservations.Count();
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
            currentPage++;
    }

    private void PrevPage()
    {
        if (currentPage > 1)
            currentPage--;

        StateHasChanged();
    }

    private void GoToPage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged(); // Ensure UI updates
        }
    }

    private async Task OnPageChangedAsync(int newPageNumber)
    {
        await Task.Run(() => { currentPage = newPageNumber; });
    }

    private void OnPageSizeChange(ChangeEventArgs e)
    {
        pageSize = int.Parse(e.Value.ToString());
        currentPage = 1;
        StateHasChanged();
    }

    private string GetShortComment(string? comment)
    {
        if (string.IsNullOrEmpty(comment))
            return string.Empty;

        return comment.Length > 20 ? comment.Substring(0, 10) + "..." : comment;
    }

    private async Task ExportToExcel()
    {
        try
        {
            using var workbook = new XLWorkbook();
            var worksheet = workbook.Worksheets.Add("Reservations");

            // Add headers
            var headers = new string[] { "Name", "Email", "Phone", "Tickets", "Is Student", "Contacted By", "Comments", "Reserved On" };
            for (int col = 0; col < headers.Length; col++)
            {
                worksheet.Cell(1, col + 1).Value = headers[col];
            }

            // Populate data
            for (int i = 0; i < filteredReservations.Count; i++)
            {
                var res = filteredReservations[i];
                worksheet.Cell(i + 2, 1).Value = res.Name;
                worksheet.Cell(i + 2, 2).Value = res.Email;
                worksheet.Cell(i + 2, 3).Value = res.PhoneNumber;
                worksheet.Cell(i + 2, 4).Value = res.Tickets;
                worksheet.Cell(i + 2, 5).Value = res.IsStudent ? "Yes" : "No";
                worksheet.Cell(i + 2, 6).Value = res.ContactedBy;
                worksheet.Cell(i + 2, 7).Value = res.Comments;
                worksheet.Cell(i + 2, 8).Value = res.CreatedAt;
            }

            // Save to memory stream
            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            var fileName = $"Reservations_{DateTime.Now:yyyyMMdd_HHmmss}.xlsx";

            // Convert to Base64 for download
            var fileBytes = stream.ToArray();
            var base64String = Convert.ToBase64String(fileBytes);

            await JS.InvokeVoidAsync("saveAsFile", fileName, base64String);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error exporting to Excel: " + ex.Message);
        }
    }

    private void NavigateToDetails(int reservationId, bool isEditMode)
    {
        if (isEditMode)
            NavigationManager.NavigateTo($"/admin/reservations/{reservationId}/update");
        else
            NavigationManager.NavigateTo($"/admin/reservations/{reservationId}");
    }

    private void ConfirmDelete(int id)
    {
        reservationIdToDelete = id;
        showDeleteModal = true;
    }

    private async Task DeleteAsync()
    {
        await Http.DeleteAsync($"{WebApiAddress}/api/ticket/reservation/{reservationIdToDelete}");
        showDeleteModal = false;
        await LoadReservationsAsync();
    }

    private void CancelDelete() => showDeleteModal = false;

    private void OnAddClick()
    {
        NavigationManager.NavigateTo($"/admin/reservations/reserve");
    }

    private void Logout()
    {
        NavigationManager.NavigateTo($"/admin/login");
    }
}

