@page "/reserve-ticket"

@inject HttpClient Http
@inject IConfiguration Configuration
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<div class="container-fluid px-0 mt-0">
    <!-- Toast Notification -->
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1050;">
        <div id="successToast" class="toast align-items-center text-white bg-success border-0 shadow-lg" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="3000">
            <div class="d-flex">
                <div class="toast-body fw-bold">✅ Your reservation was successful!</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    </div>

    <!-- Ticket Reservation Form -->
    <div class="container-fluid p-0 d-flex flex-column align-items-center justify-content-center">
        <div class="container d-flex align-items-center justify-content-center vh-100 overflow-hidden">
            <div class="row w-100">

                <!-- Ticket Reservation Form -->
                <div class="col-lg-6 col-md-8 mx-auto">
                    <div class="card shadow-lg p-2 animate__animated animate__fadeInDown form-card">
                        <div class="card-body">
                            <h3 class="card-title text-center mb-4 fw-bold"><i class="fas fa-clipboard-check"></i> Reserve Your Tickets</h3>
                            <EditForm Model="@reserveTicketModel" OnValidSubmit="HandleSubmit">
                                <DataAnnotationsValidator />
                                <div class="row">
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">Full Name <span class="text-danger">*</span></label>
                                    </div>
                                    <div class="col-md-8">
                                        <InputText class="form-control" @bind-Value="reserveTicketModel.Name" />
                                        <ValidationMessage For="() => reserveTicketModel.Name" class="text-danger" />
                                    </div>
                                </div>

                                @* <div class="row mt-2"> *@
                                @*     <div class="col-md-4"> *@
                                @*         <label class="form-label fw-bold">Email Address</label> *@
                                @*     </div> *@
                                @*     <div class="col-md-8"> *@
                                @*         <InputText type="email" class="form-control" @bind-Value="reserveTicketModel.Email" /> *@
                                @*         <ValidationMessage For="() => reserveTicketModel.Email" class="text-danger" /> *@
                                @*     </div> *@
                                @* </div> *@

                                @* <div class="row mt-2"> *@
                                @*     <div class="col-md-4"> *@
                                @*         <label class="form-label fw-bold">Phone Number</label> *@
                                @*     </div> *@
                                @*     <div class="col-md-8"> *@
                                @*         <InputText id="phoneInput" type="tel" class="form-control" @bind-Value="reserveTicketModel.Phone" /> *@
                                @*         <ValidationMessage For="() => reserveTicketModel.Phone" class="text-danger" /> *@
                                @*     </div> *@
                                @*     <small class="text-muted d-block mt-1"> *@
                                @*         📢 If you haven't provided an email, you must enter a phone number. *@
                                @*     </small> *@
                                @* </div> *@

                                <div class="row mt-2">
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">Email Address</label>
                                    </div>
                                    <div class="col-md-8">
                                        <InputText type="email" class="form-control" @bind-Value="reserveTicketModel.Email" />
                                        <ValidationMessage For="() => reserveTicketModel.Email" class="text-danger" />
                                    </div>
                                </div>

                                <div class="row mt-2">
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">Phone Number</label>
                                    </div>
                                    <div class="col-md-8">
                                        <InputText id="phoneInput" type="tel" class="form-control" @bind-Value="reserveTicketModel.Phone" />
                                        <ValidationMessage For="() => reserveTicketModel.Phone" class="text-danger" />
                                    </div>
                                </div>

                                @if (string.IsNullOrEmpty(reserveTicketModel.Email) && string.IsNullOrEmpty(reserveTicketModel.Phone))
                                {
                                    <div class="row mt-2">
                                        <small class="text-muted d-block mt-1 fw-bold">
                                            📢 If you haven't provided an email, you must enter a phone number.
                                        </small>
                                    </div>
                                    
                                }

                                <div class="row mt-2">
                                    <div class="col-md-4">
                                        <label class="form-check-label fw-bold">Are you a student?</label>
                                    </div>
                                    <div class="col-md-8 d-flex">
                                        <InputCheckbox class="form-check-input me-2" @bind-Value="reserveTicketModel.IsStudent" />
                                        <small class="text-muted d-block">🎓 Students will receive a discount</small>
                                    </div>
                                </div>

                                <div class="row mt-3">
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">Number of Tickets <span class="text-danger">*</span></label>
                                    </div>
                                    <div class="col-md-8">
                                        <InputNumber class="form-control" @bind-Value="reserveTicketModel.Tickets" min="1" max="150" />
                                        <ValidationMessage For="() => reserveTicketModel.Tickets" class="text-danger" />
                                    </div>
                                </div>

                                <div class="row mt-2">
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">Contacted By</label>
                                    </div>
                                    <div class="col-md-8">
                                        <InputText class="form-control" list="contactedByOptions" @bind-Value="reserveTicketModel.ContactedBy" />
                                        <datalist id="contactedByOptions">
                                            @foreach (var contact in lookupContacts)
                                            {
                                                <option value="@contact"></option>
                                            }
                                        </datalist>
                                    </div>
                                </div>

                                <div class="row mt-2">
                                    <div class="col-md-4">
                                        <label class="form-label fw-bold">Comments</label>
                                    </div>
                                    <div class="col-md-8">
                                        <InputTextArea class="form-control" @bind-Value="reserveTicketModel.Comments" rows="3" />
                                    </div>
                                </div>

                                <div class="important-notice p-2 mt-3 rounded text-center">
                                    <em>🔒 Your privacy is our priority. Your information will remain confidential and will never be shared with third parties</em>
                                </div>

                                <div class="d-flex flex-column flex-md-row justify-content-center mt-3 gap-3">
                                    <button type="submit" disabled="@(isSubmitting)" class="btn btn-gold w-100 w-md-auto">🎟 Reserve</button>
                                    <button type="button" disabled="@(isSubmitting)" class="btn btn-secondary w-100 w-md-auto fw-bold" @onclick="onCancelClick">❌ Cancel</button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                </div>

                <div class="col-lg-4 d-none d-lg-flex align-items-center justify-content-center animate__animated animate__fadeInRight right-img"></div>
            </div>
        </div>
    </div>
</div>

<style>
    .form-card {
        background: rgba(173, 168, 168, 0.6);
        border-radius: 8px;
        padding: 30px;
        width: 100%;
        max-width: 600px;
        backdrop-filter: blur(10px);
    }

    .overlay {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.6);
    }

    body {
        background: linear-gradient(135deg, #2c2c2c 30%, #6b0000 50%, #d4af37 90%);
        color: #fff;
        margin: 0;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    .container-fluid {
        flex-grow: 1;
        padding: 0;
    }

    .content {
        position: relative;
        z-index: 1;
    }

    .form-container {
        backdrop-filter: blur(10px);
    }

    .important-notice {
        background: rgba(219, 160, 160, 0.66);
        color: maroon;
        border-left: 5px solid gold;
        font-weight: bold;
        font-size: small;
    }

    .btn-dark-gray {
        background: #343a40;
        color: white;
        font-weight: bold;
        border: none;
        transition: all 0.3s ease-in-out;
    }

        .btn-dark-gray:hover {
            background: #2c2c2c;
            color: #ffff;
        }

    .form-control {
        border-radius: 5px;
        border: 1px solid gray;
        padding: 6px;
        transition: all 0.3s;
        border-color: #d3d3d361;
        background-color: #6e6a6a4d;
    }

        .form-control:focus {
            border-color: #ffef00a8;
            box-shadow: 0px 0px 10px #dfd49c;
        }

    .form-check-input {
        border-radius: 5px;
        border: 1px solid gray;
        padding: 6px;
        transition: all 0.3s;
        border-color: #d3d3d361;
        background-color: #6e6a6a4d;
    }

    .right-img {
        background: url('/assets/img1.jpeg') no-repeat center center/cover;
        position: relative;
        border-radius: 8px;
    }

    .btn-gold {
        background: linear-gradient(135deg, #d4af37, #b8860b);
        color: white;
        font-weight: bold;
        border: none;
        transition: all 0.3s ease-in-out;
    }

        .btn-gold:hover {
            background: linear-gradient(135deg, #b8860b, #8b6508);
            color: #fff;
        }

    .btn-secondary {
        background-color: #6971799c;
    }
</style>

@code {
    private ReserveTicketModel reserveTicketModel = new();
    private bool isSubmitting = false;
    private string WebApiAddress => Configuration["WebApiAddress"];
    private List<string> lookupContacts = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchLookupContacts();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("applyPhoneMask");
        }
    }

    private async Task FetchLookupContacts()
    {
        lookupContacts = await Http.GetFromJsonAsync<List<string>>($"{WebApiAddress}/api/ticket/lookup/contacts");
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSubmitting = true;
            var response = await Http.PostAsJsonAsync($"{WebApiAddress}/api/ticket/reserve", reserveTicketModel);
            if (response.IsSuccessStatusCode)
            {
                reserveTicketModel = new();
                StateHasChanged();
                await JS.InvokeVoidAsync("showToast");
            }
            isSubmitting = false;
        }
        catch (Exception ex)
        {
            var errorMessage = "An error occurred: " + ex.Message;
        }
        NavigationManager.NavigateTo($"/");
    }

    protected async Task onCancelClick()
    {
        NavigationManager.NavigateTo($"/");
    }
}
